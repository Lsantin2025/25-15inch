#include "vex.h"

using namespace vex;

// A global instance of vex::brain used for printing to the V5 brain screen
vex::brain       Brain;

/* Controller */

controller Controller = (controllerType::primary);

/*
    Axis1 - Left & Right of the Right Joystick
    Axis2 - Up & Down of the Right Joystick
    Axis3 - Up & Down of the Left Joystick
    Axis4 - Left & Right of the Left Joystick
*/

/* Controller Methods */

void joy_controller(){ // Joystick Control
    if (Controller.Axis1.position()){
        int axis = Controller.Axis1.position();
        Brain.Screen.print("Axis 1 Pos %d", axis);
        Brain.Screen.newLine();
    }
    
    if (Controller.Axis2.position()){
        int axis = Controller.Axis2.position();
        Brain.Screen.print("Axis 2 Pos: %d", axis);
        Brain.Screen.newLine();
    }

    if (Controller.Axis3.position()){
        int axis = Controller.Axis3.position();
        Brain.Screen.print("Axis 3 Pos: %d", axis);
        Brain.Screen.newLine();
    }

    if (Controller.Axis4.position()){
        int axis = Controller.Axis4.position();
        Brain.Screen.print("Axis 4 Pos: %d", axis);        
        Brain.Screen.newLine();
    }
}

/* Motors */

motor LeftMotorA(PORT3, gearSetting::ratio18_1, true); //
motor LeftMotorB(PORT2, gearSetting::ratio18_1, false); // because of gearing, middle one is opposite
motor LeftMotorC(PORT1, gearSetting::ratio18_1, true); //

motor RightMotorA(PORT8, gearSetting::ratio18_1, false);
motor RightMotorB(PORT9, gearSetting::ratio18_1, true); // because of gearing, middle one is opposite
motor RightMotorC(PORT10, gearSetting::ratio18_1, false);

motor_group leftMotors = motor_group(LeftMotorA,LeftMotorB,LeftMotorC);
motor_group rightMotors = motor_group(RightMotorA, RightMotorB,RightMotorC);
drivetrain Drivetrain = drivetrain(leftMotors, rightMotors, 259.34, 320, 40, mm, 1);

motor Intake(PORT5, gearSetting::ratio18_1, true);


/* AI Vision Sensor */

// Robot configuration code.
// AI Classification Competition Element IDs
enum gameElements {
  mobileGoal,
  redRing,
  blueRing,
};

// AI Vision Color Descriptions
aivision::colordesc aiVision15_Red(1, 235, 77, 139, 30, 0.3);
aivision::colordesc aiVision15_Blue(2, 55, 147, 200, 28, 0.3);
aivision::colordesc aiVision15_Yellow(3, 183, 220, 130, 30, 0.75);

// AI Vision Code Descriptions
vex::aivision aiVision15(PORT15, aiVision15_Red, aiVision15_Blue, aiVision15_Yellow, aivision::ALL_AIOBJS);

/* AI Vision Sensor Methods */

void red_Info(){
  aiVision15.takeSnapshot(aiVision15_Red);
  if (aiVision15.objects[0].id == 1) {
    Brain.Screen.setCursor(1,1);
    Brain.Screen.print("Red Ring");
    
    Brain.Screen.setCursor(2,1);
    Brain.Screen.print("X Pos: %d", aiVision15.objects[0].centerX);
    
    Brain.Screen.setCursor(3,1);
    Brain.Screen.print("Y Pos: %d", aiVision15.objects[0].centerY);

    Brain.Screen.setCursor(4,1);
    Brain.Screen.print("Width: %d", aiVision15.objects[0].width);

    Brain.Screen.setCursor(5,1);
    Brain.Screen.print("Height: %d", aiVision15.objects[0].height);

    Brain.Screen.setCursor(6,1);
    Brain.Screen.print("Origin X: %d", aiVision15.objects[0].originX);

    Brain.Screen.setCursor(7,1);
    Brain.Screen.print("Origin Y: %d", aiVision15.objects[0].originY);
  } 
}

void blue_Info(){
  Brain.Screen.clearScreen();
  Controller.Screen.clearScreen();
  
  aiVision15.takeSnapshot(aiVision15_Blue);
  if (aiVision15.objects[0].id == 2) {
    Brain.Screen.setCursor(1,1);
    Brain.Screen.print("Blue Ring");
    
    Brain.Screen.setCursor(2,1);
    Brain.Screen.print("X Pos: %d", aiVision15.objects[0].centerX);
    
    Brain.Screen.setCursor(3,1);
    Brain.Screen.print("Y Pos: %d", aiVision15.objects[0].centerY);

    Brain.Screen.setCursor(4,1);
    Brain.Screen.print("Width: %d", aiVision15.objects[0].width);

    Brain.Screen.setCursor(5,1);
    Brain.Screen.print("Height: %d", aiVision15.objects[0].height);

    Brain.Screen.setCursor(6,1);
    Brain.Screen.print("Origin X: %d", aiVision15.objects[0].originX);

    Brain.Screen.setCursor(7,1);
    Brain.Screen.print("Origin Y: %d", aiVision15.objects[0].originY);
  } 
}

void yellow_Info(){
  Brain.Screen.clearScreen();
  Controller.Screen.clearScreen();
  
  aiVision15.takeSnapshot(aiVision15_Yellow);
  if (aiVision15.objects[0].id == 3) {
    Brain.Screen.setCursor(1,1);
    Brain.Screen.print("Mobile Stake");
    
    Brain.Screen.setCursor(2,1);
    Brain.Screen.print("X Pos: %d", aiVision15.objects[0].centerX);
    
    Brain.Screen.setCursor(3,1);
    Brain.Screen.print("Y Pos: %d", aiVision15.objects[0].centerY);

    Brain.Screen.setCursor(4,1);
    Brain.Screen.print("Width: %d", aiVision15.objects[0].width);

    Brain.Screen.setCursor(5,1);
    Brain.Screen.print("Height: %d", aiVision15.objects[0].height);

    Brain.Screen.setCursor(6,1);
    Brain.Screen.print("Origin X: %d", aiVision15.objects[0].originX);

    Brain.Screen.setCursor(7,1);
    Brain.Screen.print("Origin Y: %d", aiVision15.objects[0].originY);
  } 
}

/* GPS Sensor */

gps GPS20 = gps(PORT20, 0);

/* GPS Sensor Methods */

double getXY(){
  Controller.Screen.setCursor(1,1);
  double x_Pos = GPS20.xPosition(mm);
  Controller.Screen.print("X Pos: %.1f", x_Pos);
  
  Controller.Screen.setCursor(2,1);
  double y_Pos = GPS20.yPosition(mm);
  Controller.Screen.print("Y Pos: %.1f", y_Pos);  

  return x_Pos, y_Pos;
}

/* Distance Sensor */

distance Distance11 = distance(PORT11); 

double dis_Info(){
    if (Distance11.isObjectDetected() == true){
        double val_Dis = Distance11.objectDistance(mm);
        return val_Dis;
    }
}

double Track_redRing_1(){
    red_Info();
    double val_Dis = dis_Info();

    if (aiVision15.objects[0].originX < 0 && val_Dis < 60){
      Drivetrain.stop(); 
      Intake.spin(forward, 50, percent);
    }

    double y_Pos = getXY();
    if (y_Pos < 1300){
      Drivetrain.driveFor(y_Pos - 1800, mm);
    }
    
    else if (y_Pos > 1700){
      Drivetrain.stop();
    }
    return y_Pos;
} 

int main() {
    Brain.Screen.clearScreen();
    Controller.Screen.clearScreen();

    // Drivetrain.setDriveVelocity(25, pct);
    // Drivetrain.setTurnVelocity(50, pct);
    
    while(1) {        

        // Allow other tasks to run
        this_thread::sleep_for(10);
    }
}
